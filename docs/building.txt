Prerequisites
=============
ruby (used by substrata build scripts)
cmake (used for substrata build)
Python (used by LLVM build)


Check out source
================
	cd ~/programming

	git clone https://github.com/glaretechnologies/glare-core.git
	git clone https://github.com/glaretechnologies/winter.git
	git clone https://github.com/glaretechnologies/substrata.git


Build libraries that Substrata uses
===================================
	mkdir libs

Set needed env vars:
GLARE_CORE_LIBS is where library build scripts will build libraries: Qt, LLVM, Libjpegturbo etc.
WINTER_DIR just has the path to the checked out Winter repo.
GLARE_CORE_TRUNK_DIR just has the path to the checked out Glare-core repo.
CYBERSPACE_OUTPUT is where the built executables will be placed.

For example:
	export GLARE_CORE_LIBS=/Users/XX/programming/libs
	export WINTER_DIR=/Users/XX/programming/winter
	export GLARE_CORE_TRUNK_DIR=/Users/XX/programming/glare-core
	export CYBERSPACE_OUTPUT=/Users/XX/programming/substrata_output

	cd glare-core/scripts
	ruby build_libressl.rb
	ruby build_llvm.rb

	cd ../../
	cd substrata/scripts

	ruby build_jpegturbo.rb
	ruby build_qt.rb


Optionally build Chromium Embedded Framework (CEF) as described below.  The following build instructions will assume we are building without CEF support.
CEF is used for web-views. (embedded browser widgets)

Build Substrata
================
	cd ../../
	mkdir substrata_build
	cd substrata_build

On Windows:
	cmake ../substrata -DCEF_SUPPORT=OFF

On Mac/linux, x64 architecture:
	cmake ../substrata -DCEF_SUPPORT=OFF -DCMAKE_BUILD_TYPE=Debug

On Mac, ARM64 architecture:
	cmake ../substrata -DCEF_SUPPORT=OFF -DCMAKE_BUILD_TYPE=Debug -DTARGET_ARM64=ON


Start build:	
	make

Or to just build the GUI client:
	make gui_client

To build with e.g. 8 threads:
	make gui_client -j 8


Running Substrata
=================

	cd ../
	cd substrata/scripts
	ruby copy_files_to_output.rb --no_cef


Then run the gui_client executable that should have been built.






Building Chromium Embedded Framework (CEF)
==========================================

We want to build CEF ourselves so we can compile in proprietary_codecs (in particular h264 support) 


CEF on Windows
===========

pre-build:
---------
Install Windows 11 SDK with 10.0.22621.0 version 
(Otherwise get the following error: "Exception: Path "C:\Program Files (x86)\Windows Kits\10\\include\10.0.22621.0\\um" from environment variable "include" does not exist. Make sure the necessary SDK is installed.")

Building CEF from source
------------------------
Following https://bitbucket.org/chromiumembedded/cef/wiki/AutomatedBuildSetup and https://bitbucket.org/chromiumembedded/cef/wiki/BranchesAndBuilding.md roughly:

Download https://bitbucket.org/chromiumembedded/cef/raw/master/tools/automate/automate-git.py

In cmd.exe shell:


set GN_DEFINES=is_official_build=true proprietary_codecs=true ffmpeg_branding=Chrome use_thin_lto=false
set GYP_MSVS_VERSION=2022
set CEF_ARCHIVE_FORMAT=tar.bz2
C:\programming>python automate-git.py --download-dir=c:/cef --branch=5845 --minimal-distrib --client-distrib --force-clean --x64-build --with-pgo-profiles

Branch 5845 is June 2023


To build binary distribution
----------------------------
Add C:\cef\depot_tools to PATH env var (needed because make_distrib.bat calls 'python.bat') which is in C:\cef\depot_tools.

cd C:\cef\chromium\src\cef\tools
make_distrib.bat --ninja-build --x64-build

Builds to something like:
C:\cef\chromium\src\cef\binary_distrib\cef_binary_101.0.3+g68a0a11+chromium-101.0.4951.26_windows64\




Rebuild libcef C++ dll wrapper
------------------------------
Change into the binary distribution directory we just built:

cd C:\cef\chromium\src\cef\binary_distrib\cef_binary_101.0.3+g68a0a11+chromium-101.0.4951.26_windows64
mkdir libcef_dll_build
cd libcef_dll_build
cmake ../
# Open in Visual Studio:
&"C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe" cef.sln

For libcef_dll_wrapper project:
Debug config:
remove _HAS_ITERATOR_DEBUGGING=0 from libcef_dll_wrapper c++ preprocess defs
Change debug C++ code generation  / Runtime Library to "Multi-threaded Debug DLL (/MDd)"

Release config:
Change debug C++ code generation  / Runtime Library to "Multi-threaded DLL (/MD)"






CEF on Mac
===========
To allow the pre-built spotify binaries to be loaded:
cd /Users/nick/programming/cyberspace_output/test_builds
xattr -d com.apple.quarantine Chromium\ Embedded\ Framework.framework/Chromium\ Embedded\ Framework



https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection



cd /Users/nick/programming/cef_binary_100.0.24+g0783cf8+chromium-100.0.4896.127_macosx64/libcef_dll_build/tests/cefclient/Release
codesign --options runtime --deep --force --verify --verbose --sign "Developer ID Application: Glare Technologies UK Limited" "cefclient Helper.app"


codesign --options runtime --deep --force --verify --verbose --sign "Developer ID Application: Glare Technologies UK Limited" "/Users/nick/programming/cyberspace_output/test_builds/gui_client.app/Contents/Frameworks/Chromium Embedded Framework.framework"



CEF on Linux
============
sudo apt-get install gperf

cd /home/nick/cef
export GN_DEFINES="is_official_build=true use_sysroot=true use_allocator=none symbol_level=1 is_cfi=false use_thin_lto=false proprietary_codecs=true ffmpeg_branding=Chrome"
export CEF_ARCHIVE_FORMAT=tar.bz2
python3 automate-git.py --download-dir=/home/nick/cef --branch=4951 --minimal-distrib --client-distrib --force-clean --build-target=cefsimple --x64-build


# Change dir into the just-build binary distribution dir (path may differ), and build libcef_dll wrapper:
cd ~/cef/chromium/src/cef/binary_distrib/cef_binary_101.0.18+g367b4a0+chromium-101.0.4951.67_linux64
mkdir libcef_dll_build && cd libcef_dll_build
cmake ../
make libcef_dll_wrapper -j 12







Compiling webclient typescript (.ts) files:
===========================================

Install typescript SDK from e.g. https://marketplace.visualstudio.com/items?itemName=TypeScriptTeam.typescript-46rc
(Installed tsc.js to C:\Program Files (x86)\Microsoft SDKs\TypeScript\4.6\tsc.js)
Install node.js (don't need NPM tho)
cd N:\substrata\trunk\webclient
node "C:\Program Files (x86)\Microsoft SDKs\TypeScript\4.6\tsc.js" -w
-w is to watch dir for changes.
